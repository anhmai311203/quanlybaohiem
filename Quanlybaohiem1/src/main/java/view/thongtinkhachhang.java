/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import DAO.Dbconnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author MT
 */
public class thongtinkhachhang extends javax.swing.JFrame {

    /**
     * Creates new form thongtinkhachhang
     */
    public thongtinkhachhang() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        btnthem = new javax.swing.JButton();
        btnsua = new javax.swing.JButton();
        btnxoa = new javax.swing.JButton();
        btnluu = new javax.swing.JButton();
        btnthoat = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnload = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 204, 255));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "id", "Userid", "Fullname", "Điện thoại", "Địa chỉ", "ngày tạo", "Tuổi"
            }
        ));
        jScrollPane1.setViewportView(table);

        btnthem.setText("Thêm khách hàng");
        btnthem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnthemActionPerformed(evt);
            }
        });

        btnsua.setText("Sửa khách hàng");
        btnsua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsuaActionPerformed(evt);
            }
        });

        btnxoa.setText("Xóa khách hàng");
        btnxoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnxoaActionPerformed(evt);
            }
        });

        btnluu.setText("lưu");
        btnluu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnluuActionPerformed(evt);
            }
        });

        btnthoat.setText("Thoát");
        btnthoat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnthoatActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Thông tin khách hàng");

        btnload.setText("Tải lại");
        btnload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnloadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnthem)
                                .addGap(18, 18, 18)
                                .addComponent(btnsua)
                                .addGap(18, 18, 18)
                                .addComponent(btnxoa)
                                .addGap(18, 18, 18)
                                .addComponent(btnluu)
                                .addGap(18, 18, 18)
                                .addComponent(btnthoat))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(247, 247, 247)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(65, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnload)
                .addGap(96, 96, 96))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel1)
                .addGap(5, 5, 5)
                .addComponent(btnload)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnthem)
                    .addComponent(btnsua)
                    .addComponent(btnxoa)
                    .addComponent(btnluu)
                    .addComponent(btnthoat))
                .addContainerGap(79, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnthemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnthemActionPerformed
        // TODO add your handling code here:
        new themkhachhang().setVisible(true);
    }//GEN-LAST:event_btnthemActionPerformed
private void tableMouseClicked(java.awt.event.MouseEvent evt) {                                  
    int row = table.getSelectedRow();  // Lấy dòng được chọn
    if (row != -1) {
        // Hiển thị thông tin khách hàng lên các trường nhập liệu (nếu có)
        // Ví dụ nếu bạn có các biến hiển thị như txtFullName, txtPhone, txtAddress, txtEmail...
        String customerID = table.getValueAt(row, 0).toString();  // CustomerID
        String fullName = table.getValueAt(row, 2).toString();     // FullName
        String phone = table.getValueAt(row, 3).toString();        // Phone
        String address = table.getValueAt(row, 4).toString();      // Address
        String email = table.getValueAt(row, 5).toString();        // Email

        // Nếu bạn có các JTextField hoặc JLabel để hiển thị thông tin, thì gán giá trị vào chúng
        // Ví dụ:
        // txtCustomerID.setText(customerID);
        // txtFullName.setText(fullName);
        // txtPhone.setText(phone);
        // txtAddress.setText(address);
        // txtEmail.setText(email);
    }
}

    private void btnsuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsuaActionPerformed
        // TODO add your handling code here:
         int row = table.getSelectedRow();  // Lấy dòng được chọn trong bảng
    if (row != -1) {
        // Lấy các giá trị sửa đổi từ bảng
        String customerID = table.getValueAt(row, 0).toString();  // CustomerID
        String fullName = table.getValueAt(row, 2).toString();     // FullName
        String phone = table.getValueAt(row, 3).toString();        // Phone
        String address = table.getValueAt(row, 4).toString();      // Address
        String email = table.getValueAt(row, 5).toString();        // Email

        try (Connection conn = Dbconnection.getConnection()) {
            String sql = "UPDATE Customers SET FullName = ?, Phone = ?, Address = ?, Email = ? WHERE CustomerID = ?";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            
            pstmt.setString(1, fullName);
            pstmt.setString(2, phone);
            pstmt.setString(3, address);
            pstmt.setString(4, email);
            pstmt.setInt(5, Integer.parseInt(customerID));

            int rows = pstmt.executeUpdate();
            if (rows > 0) {
                JOptionPane.showMessageDialog(this, "Cập nhật khách hàng thành công!");
                loadCustomerData();  // Tải lại dữ liệu trong bảng
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật khách hàng.");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn một khách hàng để sửa.");
    }
    }//GEN-LAST:event_btnsuaActionPerformed

    private void btnxoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnxoaActionPerformed
        // TODO add your handling code here:
        int row = table.getSelectedRow();  // Lấy dòng được chọn trong bảng
    if (row != -1) {
        String customerID = table.getValueAt(row, 0).toString();  // CustomerID
        
        // Xác nhận trước khi xóa
        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn xóa khách hàng này?", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection conn = Dbconnection.getConnection()) {
                String sql = "DELETE FROM Customers WHERE CustomerID = ?";
                PreparedStatement pstmt = conn.prepareStatement(sql);
                
                pstmt.setInt(1, Integer.parseInt(customerID));
                int rows = pstmt.executeUpdate();
                if (rows > 0) {
                    JOptionPane.showMessageDialog(this, "Xóa khách hàng thành công!");
                    loadCustomerData();  // Tải lại dữ liệu trong bảng
                }
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Lỗi khi xóa khách hàng.");
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn một khách hàng để xóa.");
    }
    }//GEN-LAST:event_btnxoaActionPerformed

    private void btnluuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnluuActionPerformed
        // TODO add your handling code here:
 // Lấy dòng được chọn trong bảng
     int row = table.getSelectedRow();  // Lấy dòng được chọn trong bảng
    if (row != -1) {
        // Lấy các giá trị đã sửa từ bảng
        String customerID = table.getValueAt(row, 0).toString();  // CustomerID
        String userID = table.getValueAt(row, 1).toString();        
        String fullName = table.getValueAt(row, 2).toString();     // FullName
        String phone = table.getValueAt(row, 3).toString();        // Phone
        String address = table.getValueAt(row, 4).toString();      // Address
        String createdAt = table.getValueAt(row, 5).toString();        // ngay khởi tạo
        String age = table.getValueAt(row, 6).toString(); 
        // Kiểm tra nếu các trường dữ liệu không trống
        if ( customerID.isEmpty() || userID.isEmpty() || fullName.isEmpty() || phone.isEmpty() || address.isEmpty() || createdAt.isEmpty() || age.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng điền đầy đủ thông tin.");
            return;
        }

        try (Connection conn = Dbconnection.getConnection()) {
            // Câu lệnh SQL để cập nhật thông tin khách hàng
            String sql = "UPDATE Customers SET UserID= ?, FullName = ?, Phone = ?, Address = ?, CreatedAt = ?, Age=? WHERE CustomerID = ?";
            PreparedStatement pstmt = conn.prepareStatement(sql);

            // Thiết lập các giá trị vào câu lệnh SQL
            pstmt.setString(1, userID);
            pstmt.setString(2, fullName);
            pstmt.setString(3, phone);
            pstmt.setString(4, address);
            pstmt.setString(5, createdAt);
            pstmt.setString(6, age);
            pstmt.setInt(7, Integer.parseInt(customerID));  // Chuyển CustomerID sang kiểu int

            // Thực hiện câu lệnh update
            int rows = pstmt.executeUpdate();
            if (rows > 0) {
                JOptionPane.showMessageDialog(this, "Cập nhật thông tin khách hàng thành công!");
                loadCustomerData();  // Tải lại dữ liệu trong bảng sau khi cập nhật
            } else {
                JOptionPane.showMessageDialog(this, "Không có thay đổi nào hoặc lỗi khi cập nhật.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật thông tin khách hàng.");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn một khách hàng để lưu.");
    }

    }//GEN-LAST:event_btnluuActionPerformed

    private void btnthoatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnthoatActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);  // Hoặc this.dispose() nếu bạn muốn đóng hoàn toàn cửa sổ này.

    // Mở lại cửa sổ Thanhtoan
    menu menuFrame = new menu();  // Tạo một đối tượng Thanhtoan mới
    menuFrame.setVisible(true);
    }//GEN-LAST:event_btnthoatActionPerformed

    private void btnloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnloadActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) table.getModel();
    model.setRowCount(0);  // Xóa dữ liệu cũ trong bảng trước khi thêm mới
table.setModel(model);
    try (Connection conn = Dbconnection.getConnection()) {
        // Truy vấn để lấy tất cả các khách hàng
        String query = "SELECT CustomerID, UserID, FullName, Phone, Address, CreatedAt,Age FROM Customers";
        PreparedStatement pstmt = conn.prepareStatement(query);
        ResultSet rs = pstmt.executeQuery();

        // Lặp qua kết quả truy vấn
        while (rs.next()) {
            int customerID = rs.getInt("CustomerID");
            int userID = rs.getInt("UserID");
            String fullName = rs.getString("FullName");
            String phone = rs.getString("Phone");
            String address = rs.getString("Address");
            
            Timestamp createdAt = rs.getTimestamp("CreatedAt");
            String age = rs.getString("Age");
            // Kiểm tra xem dữ liệu có tồn tại trong bảng chưa
            boolean exists = false;
            for (int i = 0; i < model.getRowCount(); i++) {
                if (model.getValueAt(i, 0).equals(customerID)) {
                    exists = true;  // Nếu tìm thấy trùng CustomerID, đánh dấu là đã tồn tại
                    break;
                }
            }

            // Nếu chưa có, thêm dữ liệu vào bảng
            if (!exists) {
                model.addRow(new Object[]{
                    customerID, userID, fullName, phone, address, createdAt,age
                });
            }
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Lỗi khi tải dữ liệu khách hàng.");
    }
    }//GEN-LAST:event_btnloadActionPerformed
private void loadCustomerData() {
    // Lấy model từ bảng
    DefaultTableModel model = (DefaultTableModel) table.getModel();
    model.setRowCount(0); // Xóa dữ liệu cũ trong bảng trước khi thêm mới

    // Kết nối cơ sở dữ liệu và tải dữ liệu
    try (Connection conn = Dbconnection.getConnection()) { 
    // Kết nối qua lớp Dbconnection
    String query = "SELECT CustomerID, UserID, FullName, Phone, Address, CreatedAt, Age FROM Customers";
    
    // Chuẩn bị câu lệnh
    try (PreparedStatement ps = conn.prepareStatement(query); 
         ResultSet rs = ps.executeQuery()) {
        
        // Lặp qua kết quả và thêm vào bảng
        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getInt("CustomerID"),     // Lấy CustomerID
                rs.getInt("UserID"),         // Lấy UserID
                rs.getString("FullName"),    // Lấy FullName
                rs.getString("Phone"),       // Lấy Phone
                rs.getString("Address"),     // Lấy Address
                rs.getTimestamp("CreatedAt"), // Lấy CreatedAt
                rs.getString("Age")          // Lấy Age (đưa xuống cuối)
            });
        }
    }
} catch (SQLException e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(this, "Lỗi khi tải dữ liệu khách hàng: " + e.getMessage());
}

}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(thongtinkhachhang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(thongtinkhachhang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(thongtinkhachhang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(thongtinkhachhang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new thongtinkhachhang().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnload;
    private javax.swing.JButton btnluu;
    private javax.swing.JButton btnsua;
    private javax.swing.JButton btnthem;
    private javax.swing.JButton btnthoat;
    private javax.swing.JButton btnxoa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
